let Components = require("../../components.json");
let fs = require("fs");
let render = require("json-templater/string");
let uppercamelcase = require("uppercamelcase");
let path = require("path");
const EOL = require("os").EOL;

const OUTPUT_PATH = path.join(__dirname, "../../src/index.js");
const IMPORT_TEMPLATE = "import {{name}} from \"../packages/{{package}}/index.js\";";
const INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
const MAIN_TEMPLATE = `/* Automatically generated by "./build/bin/build-entry.js" */

{{include}}
import locale from "element-ui/src/locale";
import CollapseTransition from "element-ui/src/transitions/collapse-transition";
const components = [
{{install}},
  CollapseTransition
];
const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);
  components.forEach(component => {
    Vue.component(component.name, component);
  });
  Vue.use(InfiniteScroll);
  Vue.use(Loading.directive);
  Vue.prototype.$ELEMENT = {
    size: opts.size || "",
    zIndex: opts.zIndex || 2000
  };
  Vue.prototype.$loading = Loading.service;
  Vue.prototype.$msgbox = MessageBox;
  Vue.prototype.$alert = MessageBox.alert;
  Vue.prototype.$confirm = MessageBox.confirm;
  Vue.prototype.$prompt = MessageBox.prompt;
  Vue.prototype.$notify = Notification;
  Vue.prototype.$message = Message;
};
/* istanbul ignore if */
if (typeof window !== "undefined" && window.Vue) {
  install(window.Vue);
}
export default {
  version: "{{version}}",
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
  Loading,
{{list}}
};
`;

//delete Components.font;
let ComponentNames = Object.keys(Components);
let includeComponentTemplate = [];
let installTemplate = [];
let listTemplate = [];

ComponentNames.forEach(name => {
  let componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  if (["Loading", "MessageBox", "Notification", "Message", "InfiniteScroll"].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name
    }));
  }

  if (componentName !== "Loading") listTemplate.push(`  ${componentName}`);
});

let template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(EOL),
  install: installTemplate.join("," + EOL),
  version: process.env.VERSION || require("../../package.json").version,
  list: listTemplate.join("," + EOL)
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log("[build entry] done:", OUTPUT_PATH);

